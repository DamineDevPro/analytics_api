"""
Django settings for analytics project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from dotenv import load_dotenv
# from pyspark import SparkContext, SparkConf
# from pyspark.sql import SQLContext
import pytz
from pymongo import MongoClient
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from google.cloud import storage

UTC = pytz.utc
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# ----------------------------------------------------------------------
# Excel file export service
# -------------------------------
# Ecommerce service
ECOMMERCE_SERVICE = {1: "Buyers",
                     2: "Inventory",
                     3: "Promo Code Logs",
                     4: "Orders",
                     5: "Notify",
                     9: "Live_SKUs",
                     11: "Accounting",
                     12: "weekly_payout",
                     13: "store_invoice"
                     }
# -------------------------------
# Ride service
RIDE_SERVICE_SUPPORT = {6: "Trip Invoice",
                        7: "Fare Estimate",
                        8: "Bookings",
                        9: "Financial Logs",
                        10: "Driver Acceptance Rate",
                        }
# ---------------------------------
PLATFORM_SUPPORT = {1: "admin", 2: "dispatcher"}

# -----------------------------------------------------------------------
# environment setup
env_path = BASE_DIR + '/analytics/.env'
load_dotenv(dotenv_path=env_path)
# GOOGLE_CRED = BASE_DIR + "/analytics/maps-256621-259fd18c86dc.json"

# SPARK_HOST = os.getenv("SPARK_HOST")
# environment variable
MONGO_URL = os.getenv("MONGODB_URL")
print("#" * 50)
print("MONGO_URL", MONGO_URL)
print("#" * 50)
CASSANDRA_IP = os.getenv("CASSANDRA_IP")
CURRENCY_API = os.getenv("CURRENCY_API")
BASE_CURRENCY = os.getenv("BASE_CURRENCY")
# # Cassandra auth credential
CASSANDRA_USER_NAME = os.getenv("CASSANDRA_USER_NAME")
CASSANDRA_PASSWORD = os.getenv("CASSANDRA_PASSWORD")

MONGO_DB = str(os.getenv("MONGO_DB"))
print("#" * 50)
print("MONGO_DB", MONGO_DB)
print("#" * 50)
MONGO_ANALYTICS_DB = os.getenv("MONGO_ANALYTICS_DB")
CASSANDRA_KEYSPACE = os.getenv("CASSANDRA_KEYSPACE")

# Mongo Database connection
mongo_client = MongoClient(MONGO_URL)
db = mongo_client[MONGO_DB]

# GEO Reverse location
# GEO_LOC_USER_AGENT = os.getenv("GEO_LOC_USER_AGENT")
# geo_locator = Nominatim(user_agent=GEO_LOC_USER_AGENT)

# Buffer time for Demand dashboard
BUFFER_TIME = os.getenv("BUFFER_TIME")

UPLOAD_ON = int(os.getenv("UPLOAD_ON"))
# ----------- AWS UPLOAD -----------
AWS_ACCESS_KEY = os.getenv("AWS_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
S3_IMAGE_BUCKET = os.getenv("S3_IMAGE_BUCKET")
S3_IMAGE_PATH = os.getenv("S3_IMAGE_PATH")
S3_REGION = os.getenv("S3_REGION")
IDENTITY_POOL_ID = os.getenv("IDENTITY_POOL_ID")
SERVICE_PROVIDER_NAME = os.getenv("SERVICE_PROVIDER_NAME")
AWS_ARN_NAME = os.getenv("AWS_ARN_NAME")

# ----------- GOOGLE UPLOAD -----------
GOOGLE_IMAGE_LINK = os.getenv("GOOGLE_IMAGE_LINK")
GOOGLE_BUCKET_NAME = os.getenv("GOOGLE_BUCKET_NAME")
GOOGLE_PROJECT_NAME = os.getenv("GOOGLE_PROJECT_NAME")
GOOGLE_CRED = os.getenv("GOOGLE_JSON_PATH")
GOOGLE_AUTH = int(os.getenv("GOOGLE_AUTH")) if UPLOAD_ON == 2 else None
google_client = ""
if UPLOAD_ON == 2:
    try:
        print(" GOOGLE_JSON_PATH ----------->", GOOGLE_CRED)
        google_client = {1: storage.Client.from_service_account_json(json_credentials_path=GOOGLE_CRED),
                         2: storage.Client(project=GOOGLE_PROJECT_NAME)}[GOOGLE_AUTH]
    except:
        print("ISSUE WITH RESPECT TO GOOGLE PLATFORM - Environment Variable Issue, "
              "Only Support 1 for Json Auth and "
              "2 for Google Project name")
        exit()

# ---------- CASSANDRA WALLET -------------
WALLET_CASSANDRA_IP = os.getenv("WALLET_CASSANDRA_IP")
WALLET_CASSANDRA_USERNAME = os.getenv("WALLET_CASSANDRA_USERNAME")
WALLET_CASSANDRA_PASSWORD = os.getenv("WALLET_CASSANDRA_PASSWORD")
WALLET_CASSANDRA_KEYSPACE = os.getenv("WALLET_CASSANDRA_KEYSPACE")
print("+" * 30)
print("WALLET_CASSANDRA_IP --->", WALLET_CASSANDRA_IP)
print("WALLET_CASSANDRA_USERNAME --->", WALLET_CASSANDRA_USERNAME)
print("WALLET_CASSANDRA_PASSWORD --->", WALLET_CASSANDRA_PASSWORD)
print("WALLET_CASSANDRA_KEYSPACE --->", WALLET_CASSANDRA_KEYSPACE)
print("+" * 30)

if WALLET_CASSANDRA_USERNAME and WALLET_CASSANDRA_PASSWORD:
    ap = PlainTextAuthProvider(username=WALLET_CASSANDRA_USERNAME, password=WALLET_CASSANDRA_PASSWORD)
    cluster = Cluster([WALLET_CASSANDRA_IP], port=9042, auth_provider=ap)
else:
    cluster = Cluster([WALLET_CASSANDRA_IP], port=9042)
# wallet_casandra = cluster.connect(WALLET_CASSANDRA_KEYSPACE)

if os.getenv("ENV") != "DEV":
    wallet_casandra = cluster.connect(WALLET_CASSANDRA_KEYSPACE)
else:
    print("XXXXXXXX DEV Environment - no cassandra, to use it, call export ENV='PROD'")
    wallet_casandra = None
# # --------------------------------------------------------------------------------

if CASSANDRA_USER_NAME and CASSANDRA_PASSWORD:
    ap = PlainTextAuthProvider(username=CASSANDRA_USER_NAME, password=CASSANDRA_PASSWORD)
    cluster = Cluster([CASSANDRA_IP], port=9042, auth_provider=ap)
else:
    cluster = Cluster([CASSANDRA_IP], port=9042)
# _casandra = cluster.connect(CASSANDRA_KEYSPACE)
# _casandra = ''
if os.getenv("ENV") != "DEV":
    _casandra = cluster.connect(CASSANDRA_KEYSPACE)
else:
    print("XXXXXXXX DEV Environment - no cassandra, to use it, call export ENV='PROD'")
    _casandra = None
# ----------- SPARK MONGO DATABASE CONFIGURATION -----------
# conf = SparkConf().set("spark.driver.host", SPARK_HOST)
# conf.set("spark.jars.packages",
#          "org.mongodb.spark:mongo-spark-connector_2.11:2.3.2,com.datastax.spark:spark-cassandra-connector_2.11:2.5.0")
# conf.set('spark.mongodb.input.uri', MONGO_URL)
# conf.set('spark.mongodb.output.uri', MONGO_URL)
# conf.set('spark.cassandra.connection.host', CASSANDRA_IP)
# conf.set("spark.driver.maxResultSize", "0")
# Cassandra auth credential setting
# if CASSANDRA_USER_NAME and CASSANDRA_PASSWORD:
#     conf.set("spark.cassandra.auth.username", CASSANDRA_USER_NAME)
#     conf.set('spark.cassandra.auth.password', CASSANDRA_PASSWORD)
BOOKING_STATUS = {0: 'All', 1: "New", 2: "Accepted", 3: "Request Cancelled", 4: "Customer Cancelled",
                  5: "Driver Cancelled", 6: "Driver Is On The Way", 7: "Driver Has Arrived",
                  8: "Loading Started", 9: "Trip Started", 10: "Reached To Drop Location", 11: "Unloaded",
                  12: "Completed", 13: "Booking Expired"}
DEVICE_SUPPORT = {0: "All", 1: "Android", 2: "iOS"}

# SPARK CONTEXT
# sc = SparkContext.getOrCreate(conf=conf)
# sqlContext = SQLContext(sc)
# # -------------- SPARK MONOGO DB CONNECTOR CONFIGURATION ----------------
# SQL CONTEXT FOR delivexEcomm storeOrder DB
# df = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "storeOrder"). \
#     option('sampleSize', 100000).load()
# df.registerTempTable("storeOrder")
# # SQL CONTEXT FOR delivexEcomm storeOrder DB
# df_store = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "stores"). \
#     option('sampleSize', 100000).load()
# df_store.registerTempTable("stores")
# # SQL CONTEXT FOR delivexEcomm sessionLogs DB
# df_session_logs = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "sessionLogs"). \
#     option('sampleSize', 100000).load()
# df_session_logs.registerTempTable("sessionLogs")
# # SQL CONTEXT FOR delivexEcomm products DB
# df_products = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "products"). \
#     option('sampleSize', 100000).load()
# df_products.registerTempTable("products")
# # SQL CONTEXT FOR delivexEcomm cart DB
# df_cart = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "cart"). \
#     option('sampleSize', 100000).load()
# df_cart.registerTempTable("cart")
# # SQL CONTEXT FOR delivexEcomm countries DB
# df_country = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "countries"). \
#     option('sampleSize', 100000).load()
# df_country.registerTempTable("countries")
# # SQL CONTEXT FOR delivexEcomm cities DB
# df_cities = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "cities"). \
#     option('sampleSize', 100000).load()
# df_cities.registerTempTable("cities")
# # SQL CONTEXT FOR delivexEcomm zones DB
# df_zones = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "zones"). \
#     option('sampleSize', 100000).load()
# df_zones.registerTempTable("zones")
# # SQL CONTEXT FOR delivexEcomm promo_consumption_history DB
# df = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "promo_consumption_history"). \
#     option('sampleSize', 100000).load()
# df.registerTempTable("promo_consumption_history")
# # SQL CONTEXT FOR delivexEcomm bookings_rides DB
# df = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "bookings_rides"). \
#     option('sampleSize', 100000).load()
# df.registerTempTable("bookings_rides")
# # SQL CONTEXT FOR delivexEcomm promo_details DB
# df = sqlContext.read.format("com.mongodb.spark.sql.DefaultSource"). \
#     option("database", MONGO_DB). \
#     option("collection", "promo_details"). \
#     option('sampleSize', 100000).load()
# df.registerTempTable("promo_details")
# # -------------- SPARK CASSANDRA CONNECTOR CONFIGURATION ----------------
# # SQL CONTEXT FOR favouriteproductsuserwise cassandra
# df_cassandra = sqlContext.read.format("org.apache.spark.sql.cassandra") \
#     .option("keyspace", CASSANDRA_KEYSPACE) \
#     .option("table", "favouriteproductsuserwise").load()
# df_cassandra.registerTempTable("favouriteproductsuserwise")
#
# # SQL CONTEXT FOR cartlogs cassandra
# df_cart_log = sqlContext.read.format("org.apache.spark.sql.cassandra") \
#     .option("keyspace", CASSANDRA_KEYSPACE) \
#     .option("table", "cartlogs").load()
# df_cart_log.registerTempTable("cartlogs")
# -----------------------------------------------------------------------
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

sqlContext = ""

# -------------------- IF SPARK USED ---------------------
IS_SPARK = int(os.getenv("IS_SPARK")) if os.getenv("IS_SPARK") else 0

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%oy2o3y%+2q+owb46a7jp+$xm3924$tq@sisih#tro2!pt5*%t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'order_analytics_app',
    'overview_dashboard',
    'total_order_app',
    'top_product_app',
    'django_nose',
    'session_logs_app',
    'sales_performance',
    'funnel_analytics',
    'heatmap_app',
    "sla_grocery",
    "sla_ride",
    "demand_app",
    "ride_app",
    "promo_app",
    "promo_dashboard_app",
    "export_app",
    "ride_dashboard_app",
    "export_ride_app",
    "Seller_stats_app",
    "export_allpro",
    "tow_dashboard_app",
    "export_tow_app",
    "tow_app",
    "trucker_dashboard_app",
    "export_trucker_app",
    "trucker_app",
    "loadmeup_dashboard",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT'
)

CORS_ALLOW_HEADERS = (
    'accept-encoding',
    'Authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

ROOT_URLCONF = 'analytics.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'analytics.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
